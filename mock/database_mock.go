// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	http "net/http"
	reflect "reflect"
)

// MockPostgresQL is a mock of PostgresQL interface
type MockPostgresQL struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresQLMockRecorder
}

// MockPostgresQLMockRecorder is the mock recorder for MockPostgresQL
type MockPostgresQLMockRecorder struct {
	mock *MockPostgresQL
}

// NewMockPostgresQL creates a new mock instance
func NewMockPostgresQL(ctrl *gomock.Controller) *MockPostgresQL {
	mock := &MockPostgresQL{ctrl: ctrl}
	mock.recorder = &MockPostgresQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostgresQL) EXPECT() *MockPostgresQLMockRecorder {
	return m.recorder
}

// Queryx mocks base method
func (m *MockPostgresQL) Queryx(query string, args ...interface{}) (*sqlx.Rows, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryx", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryx indicates an expected call of Queryx
func (mr *MockPostgresQLMockRecorder) Queryx(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryx", reflect.TypeOf((*MockPostgresQL)(nil).Queryx), varargs...)
}

// NamedExec mocks base method
func (m *MockPostgresQL) NamedExec(query string, arg interface{}) (sql.Result, error) {
	ret := m.ctrl.Call(m, "NamedExec", query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec
func (mr *MockPostgresQLMockRecorder) NamedExec(query, arg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockPostgresQL)(nil).NamedExec), query, arg)
}

// Exec mocks base method
func (m *MockPostgresQL) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockPostgresQLMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockPostgresQL)(nil).Exec), varargs...)
}

// Mockclient is a mock of client interface
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// executeOperationRequest mocks base method
func (m *Mockclient) executeOperationRequest(req *http.Request) (*operation, error) {
	ret := m.ctrl.Call(m, "executeOperationRequest", req)
	ret0, _ := ret[0].(*operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// executeOperationRequest indicates an expected call of executeOperationRequest
func (mr *MockclientMockRecorder) executeOperationRequest(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executeOperationRequest", reflect.TypeOf((*Mockclient)(nil).executeOperationRequest), req)
}
